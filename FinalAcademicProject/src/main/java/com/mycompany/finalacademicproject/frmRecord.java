/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.finalacademicproject;

import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
//import java.util.logging.Level;
//import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author HP
 */
public class frmRecord extends javax.swing.JFrame {
    private ArrayList<Person> persons;
    /**
     * Creates new form frmRecord
     */
    public frmRecord() {
        initComponents();
        this.setLocationRelativeTo(null);   // center form to screen
        // colors the frame
        Color c = new Color(153,255,153);
        this.getContentPane().setBackground(c);
        
        persons = new ArrayList<>();
        loadRecords();
    }
    
    private void sortRecords() {
        String by = cboSort.getSelectedItem().toString();
        boolean isAsc = radAsc.isSelected();
        
        switch (by) {
        case "Name":
            if (isAsc) {
                Collections.sort(persons, Person.NameComparatorAsc);
            }
            else {
                Collections.sort(persons, Person.NameComparatorDesc);
            }
            break;

        case "Birthday":
            if (isAsc) {
                Collections.sort(persons, Person.BirthdayComparatorAsc);
            }
            else {
                Collections.sort(persons, Person.BirthdayComparatorDesc);
            }
            break;
                
        case "Age":
            if (isAsc) {
                Collections.sort(persons, Person.AgeComparatorAsc);
            }
            else {
                Collections.sort(persons, Person.AgeComparatorDesc);
            }
            break;
        }
    }
    
    private void loadRecords() {
        jtaRecords.setText("");
        
        String format = "%1$-20s %2$-12s %3$5s";
        String line = String.format(format, "NAMES", "BIRTHDAY", "AGE");
        jtaRecords.append(line + "\n");
        sortRecords();
        for (Person p : persons) {
           SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
           String bd = sdf.format(p.getBirthDay());
           line = String.format(format, p.getName(), bd, p.getAge());
           jtaRecords.append(line + "\n");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        grpSort = new javax.swing.ButtonGroup();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaRecords = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        cboSort = new javax.swing.JComboBox<>();
        radAsc = new javax.swing.JRadioButton();
        radDesc = new javax.swing.JRadioButton();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnExport = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("List of Records");
        setType(java.awt.Window.Type.UTILITY);

        jLabel3.setFont(new java.awt.Font("Rockwell", 0, 24)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jtaRecords.setEditable(false);
        jtaRecords.setColumns(20);
        jtaRecords.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        jtaRecords.setRows(5);
        jScrollPane1.setViewportView(jtaRecords);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Sort by:");

        cboSort.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cboSort.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "Birthday", "Age" }));
        cboSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboSortActionPerformed(evt);
            }
        });

        grpSort.add(radAsc);
        radAsc.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        radAsc.setSelected(true);
        radAsc.setText("Ascending");
        radAsc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radAscActionPerformed(evt);
            }
        });

        grpSort.add(radDesc);
        radDesc.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        radDesc.setText("Descending");
        radDesc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radDescActionPerformed(evt);
            }
        });

        btnAdd.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnAdd.setText("Add a Record");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnRemove.setText("Remove a Record");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnExport.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnExport.setText("Export to CSV File");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(cboSort, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radDesc)
                            .addComponent(radAsc))
                        .addGap(1, 1, 1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnExport)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cboSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radAsc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radDesc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnExport, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void save(String name, int year, int month, int day) 
            throws IllegalArgumentException {
        String sDate = month + "/" + day + "/" + year;
        // check if date is valid
        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
        sdf.setLenient(false);
        try {
            Date bdate = sdf.parse(sDate);
            Date today = new Date();
            if (bdate.after(today)) {
                throw new IllegalArgumentException("The provided date is in the future.");
            }
            else {
                persons.add(new Person(name, bdate));
            }
        } catch(ParseException pe) {
            throw new IllegalArgumentException("The provided date is invalid.");
        }
    }
    
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {                                       
        boolean repeat;
        do {
            repeat = false;
            dlgAdd dialog = new dlgAdd(this, true);
            dialog.setVisible(true);
            
            String action = dialog.getAction();
            String name = dialog.getName();
            int year = dialog.getYear();
            int month = dialog.getMonth();
            int day = dialog.getDay();
            dialog.dispose();
            dialog = null;

            if (!action.equals("back")) {
                try {
                    save(name, year, month, day);
                } catch (IllegalArgumentException iae) {
                    JOptionPane.showMessageDialog(this, 
                        "An IllegalArgumentException Caught: " + iae.getMessage(), 
                        "Add Record", JOptionPane.ERROR_MESSAGE);
                }

                loadRecords();
                if (action.equals("add")) {
                    repeat = true;
                }
            }
        } while (repeat);
    }                                      

    private void remove(String name) throws IllegalArgumentException {
        Person toRemove = null;
        for (Person p : persons) {
            if (name.equalsIgnoreCase(p.getName())) {
                toRemove = p;
                break;
            }
        }
        if (toRemove != null) {
            persons.remove(toRemove);
        }
        else {
            throw new IllegalArgumentException("Name Not Found");
        }
    }
    
    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {                                          
        boolean repeat;
        do {
            repeat = false;
            dlgRemove dialog = new dlgRemove(this, true);
            dialog.setVisible(true);
            
            String action = dialog.getAction();
            String name = dialog.getName();
            dialog.dispose();
            dialog = null;

            if (!action.equals("back")) {
                try {
                    remove(name);
                } catch (IllegalArgumentException iae) {
                    JOptionPane.showMessageDialog(this, 
                        "An IllegalArgumentException Caught: " + iae.getMessage(), 
                        "Remove Record", JOptionPane.ERROR_MESSAGE);
                }

                loadRecords();
                if (action.equals("add")) {
                    repeat = true;
                }
            }
        } while (repeat);
    }                                         

    private void cboSortActionPerformed(java.awt.event.ActionEvent evt) {                                        
        loadRecords();
    }                                       

    private void radAscActionPerformed(java.awt.event.ActionEvent evt) {                                       
        loadRecords();
    }                                      

    private void radDescActionPerformed(java.awt.event.ActionEvent evt) {                                        
        loadRecords();
    }                                       

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // get current date and time
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
        Date date = new Date();
        String filename = dateFormat.format(date) + ".csv";
        File file = new File(filename);
        
        sortRecords();
        try (PrintWriter pw = new PrintWriter(file)) {
            pw.println("NAMES,BIRTHDAY,AGE");
            for (Person p : persons) {
               SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
               String bd = sdf.format(p.getBirthDay());
               pw.println(p.getName() + "," + bd + "," + p.getAge());
            }
            JOptionPane.showMessageDialog(this, "Export completed. Filename: " + filename, 
                    "Export", JOptionPane.INFORMATION_MESSAGE);
        } catch (FileNotFoundException ex) {
            JOptionPane.showConfirmDialog(this, "Export failed. " + ex.getLocalizedMessage(), 
                    "Export", JOptionPane.ERROR_MESSAGE);
        }
    }                                         


    // Variables declaration - do not modify                     
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnRemove;
    private javax.swing.JComboBox<String> cboSort;
    private javax.swing.ButtonGroup grpSort;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jtaRecords;
    private javax.swing.JRadioButton radAsc;
    private javax.swing.JRadioButton radDesc;
    // End of variables declaration                   
}
